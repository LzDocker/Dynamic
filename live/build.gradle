println IsBuildMudle
if (IsBuildMudle.toBoolean()) {
    println IsBuildMudle
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'maven'
apply plugin: 'dagger.hilt.android.plugin'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [AROUTER_MODULE_NAME: project.getName()]
            }
        }
        ndk {
            //选择要添加的对应cpu类型的.so库。
            abiFilters 'armeabi-v7a', 'armeabi', 'arm64-v8a'
        }

        manifestPlaceholders = [
                JPUSH_PKGNAME: rootProject.ext.android.applicationId,
                JPUSH_APPKEY : rootProject.ext.push.JPUSH_APPKEY,
                JPUSH_CHANNEL: rootProject.ext.push.JPUSH_CHANNEL
        ]

    }
    sourceSets {
        main {
            if (IsBuildMudle.toBoolean()) {
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
                java.srcDirs += "src/main/debug/java/";
            } else {
                java.srcDirs += "src/main/release/java/";
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }
            jniLibs.srcDirs = ['libs']
        }
    }

    resourcePrefix "live_"

    dexOptions {
        javaMaxHeapSize "4g"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        dataBinding = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        pickFirst '**/libc++_shared.so'
        doNotStrip "*/armeabi/libYTCommon.so"
        doNotStrip "*/armeabi-v7a/libYTCommon.so"
        doNotStrip "*/x86/libYTCommon.so"
        doNotStrip "*/arm64-v8a/libYTCommon.so"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    api rootProject.ext.dependencies["hilt-android"]
    api rootProject.ext.dependencies["hilt-lifecycle-viewmodel"]
//    api files('libs/imsdk-4.3.81.jar')
//    api(name: "LiteAVSDK_Smart_7.2.8927", ext: "aar")
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    annotationProcessor rootProject.ext.dependencies["hilt-android-compiler"]
    annotationProcessor rootProject.ext.dependencies["hilt-compiler"]
    annotationProcessor rootProject.ext.dependencies["arouter-compiler"]
    annotationProcessor rootProject.ext.dependencies["room-compiler"]
    annotationProcessor rootProject.ext.dependencies["glide-compiler"]
    annotationProcessor rootProject.ext.dependencies["lifecycle-compiler"]
    annotationProcessor rootProject.ext.dependencies["autoservice"]

    api project(":commonapi")

    implementation project(":live_beauty")
    implementation project(":live_libsuperplayer")
    implementation project(":live_lvb")
    implementation project(":live_player")

}

uploadArchives {  // 本地nexus配置
    configuration = configurations.archives
    repositories {
        mavenDeployer {  //http://192.168.31.138/
            repository(url: 'http://127.0.0.1:8081/repository/dynamic') {
                authentication(userName: 'admin', password: 'admin123')
            }
            pom.project {
                version '1.0.0' //版本名称
                artifactId 'live'  //和前面网站上填写的一样
                groupId 'com.docker.live'  //和前面网站上填写的一样
                packaging 'aar' //填写aar
                description 'new version 1.0.0' //更新描述
            }
        }
    }
}



